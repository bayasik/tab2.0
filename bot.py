import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import openai
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="‚öî –°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True,
)

# OpenAI API
openai.api_key = OPENAI_API_KEY

# === –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ó–ê–î–ê–ß–ò (5W) ===
async def analyze_task(task_text):
    prompt = f"""
    –¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –ø–æ —Å—Ö–µ–º–µ 5W:
    {task_text}
    –û—Ç–≤–µ—Ç—å –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "who": "–ö—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É",
        "what": "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
        "where": "–ì–¥–µ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
        "when": "–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
        "why": "–ó–∞—á–µ–º —ç—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    }}
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": prompt}],
        temperature=0.5
    )
    return json.loads(response["choices"][0]["message"]["content"])

# === –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –°–ò–¢–£–ê–¶–ò–ò (METT-TC, OCOKA, ASCOPE, –ü–û–ì–û–î–ê) ===
async def analyze_situation(task_text):
    prompt = f"""
    –¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –ø–æ –≤–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ METT-TC, –≤–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏–∑ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ (OCOKA), –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ (ASCOPE) –∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.  
    –í JSON-—Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "METT-TC": {{
            "mission": "–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
            "enemy": "–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–µ",
            "terrain": "–û—Ü–µ–Ω–∫–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏",
            "troops": "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–∏—Ö —Å–∏–ª",
            "time": "–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
            "civilians": "–í–ª–∏—è–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞"
        }},
        "OCOKA": {{
            "observation": "–°–µ–∫—Ç–æ—Ä—ã –Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
            "cover": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏",
            "obstacles": "–ü—Ä–µ–≥—Ä–∞–¥—ã",
            "key_terrain": "–ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏",
            "avenues": "–ú–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è"
        }},
        "ASCOPE": {{
            "area": "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º",
            "structures": "–ó–¥–∞–Ω–∏—è –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è",
            "capabilities": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "organization": "–ì—Ä—É–ø–ø—ã –≤–ª–∏—è–Ω–∏—è",
            "people": "–†–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö",
            "events": "–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
        }},
        "weather": {{
            "visibility": "–í–∏–¥–∏–º–æ—Å—Ç—å",
            "wind": "–í–µ—Ç–µ—Ä",
            "precipitation": "–û—Å–∞–¥–∫–∏",
            "cloudiness": "–¢—É—á–Ω–æ—Å—Ç—å",
            "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å"
        }}
    }}
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": prompt}],
        temperature=0.5
    )
    return json.loads(response["choices"][0]["message"]["content"])

# === –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò WARNORD ===
async def generate_warnord(task_text):
    task_analysis = await analyze_task(task_text)
    situation_analysis = await analyze_situation(task_text)

    warnord = f"""
üõë **WARNORD** üõë  
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}  

## **1. –°–ò–¢–£–ê–¶–ò–Ø**  
üìç **–ó–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞:** {situation_analysis["METT-TC"]["terrain"]}  
üîª **–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:** {situation_analysis["METT-TC"]["enemy"]}  
üü¢ **–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã:** {situation_analysis["METT-TC"]["troops"]}  
üè¢ **–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä:** {situation_analysis["METT-TC"]["civilians"]}  
üåç **–ê–Ω–∞–ª–∏–∑ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏:** {situation_analysis["OCOKA"]["key_terrain"]}  

## **2. –ó–ê–î–ê–ù–ò–ï**  
üë• **–ö—Ç–æ:** {task_analysis["who"]}  
‚öî **–ß—Ç–æ:** {task_analysis["what"]}  
üìç **–ì–¥–µ:** {task_analysis["where"]}  
‚è≥ **–ö–æ–≥–¥–∞:** {task_analysis["when"]}  
üéØ **–ó–∞—á–µ–º:** {task_analysis["why"]}  

## **3. –í–´–ü–û–õ–ù–ï–ù–ò–ï**  
üìå **–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:** {situation_analysis["OCOKA"]["avenues"]}  
üéØ **–ì–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:** {task_analysis["what"]}  
üõ† **–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–æ–ª–∏:** {situation_analysis["METT-TC"]["troops"]}  

## **4. –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–û–ï –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï**  
ü©∫ **–ú–µ–¥–∏—Ü–∏–Ω–∞:** {situation_analysis["ASCOPE"]["capabilities"]}  
üéí **–°–Ω–∞–±–∂–µ–Ω–∏–µ:** {situation_analysis["ASCOPE"]["structures"]}  
üöõ **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** {situation_analysis["OCOKA"]["obstacles"]}  

## **5. –ö–û–ú–ê–ù–î–û–í–ê–ù–ò–ï –ò –°–í–Ø–ó–¨**  
üì° **–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏:** –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã  
üîë **–ö–æ–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:** –ü–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã:** –û—Ç—Ö–æ–¥ –ø–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É  
"""
    return warnord

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

@dp.message_handler(lambda message: message.text == "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def handle_task_analysis(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

@dp.message_handler(lambda message: message.text == "‚öî –°–æ–∑–¥–∞—Ç—å WARNORD")
async def handle_warnord(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD.")

@dp.message_handler(lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
async def handle_weather(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@dp.message_handler()
async def process_text_message(message: types.Message):
    if "–±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏" in message.reply_to_message.text:
        analysis = await analyze_task(message.text)
        await message.answer(f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n{json.dumps(analysis, indent=4, ensure_ascii=False)}")
    elif "WARNORD" in message.reply_to_message.text:
        warnord = await generate_warnord(message.text)
        await message.answer(warnord)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())