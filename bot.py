import asyncio
import logging
import os
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

@dp.message(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def request_task(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

@dp.message(lambda message: message.text and message.text != "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def process_task(message: types.Message):
    task_text = message.text

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ 5W
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –ø–æ 5W (Who, What, Where, When, Why) –≤ —Å—Ç–∏–ª–µ –≤–æ–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∫–∞–∑–∞."},
                {"role": "user", "content": task_text}
            ]
        )
        order = response["choices"][0]["message"]["content"]

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        intel_response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥. –î–∞–π —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏."},
                {"role": "user", "content": task_text}
            ]
        )
        intel = intel_response["choices"][0]["message"]["content"]

        await message.answer(f"üìú **–ë–æ–µ–≤–æ–π –ø—Ä–∏–∫–∞–∑:**\n\n{order}")
        await message.answer(f"üîç **–†–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n{intel}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))