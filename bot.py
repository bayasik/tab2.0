import asyncio
import logging
import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import openai

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="‚öî –°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True
)

openai.api_key = OPENAI_API_KEY

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

@dp.message()
async def handle_messages(message: types.Message):
    text = message.text.lower()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if text == "üìä –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (5W, METT-TC, OCOKA, ASCOPE, –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã).")
    elif text == "‚öî —Å–æ–∑–¥–∞—Ç—å warnord":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD.")
    elif text == "üå§ –ø–æ–≥–æ–¥–∞":
        weather_report = await analyze_weather()
        await message.answer(weather_report, parse_mode="Markdown")
    else:
        if message.reply_to_message and "–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" in message.reply_to_message.text:
            await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏...")
            analysis = await analyze_task(message.text)
            await message.answer(f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n{analysis}", parse_mode="Markdown")
        elif message.reply_to_message and "–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD" in message.reply_to_message.text:
            await message.answer("‚öî üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é WARNORD...")
            warnord = await generate_warnord(message.text)
            await message.answer(f"‚öî **WARNORD:**\n{warnord}", parse_mode="Markdown")

### –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò (5W, METT-TC, OCOKA, ASCOPE, –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã)
async def analyze_task(task_text: str):
    prompt = f"""–¢—ã ‚Äî —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –†–∞–∑–±–µ—Ä–∏ –±–æ–µ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
1Ô∏è‚É£ **5W:** (Who, What, Where, When, Why)  
2Ô∏è‚É£ **METT-TC:** (Mission, Enemy, Terrain, Troops, Time, Civilians)  
3Ô∏è‚É£ **OCOKA:** (Observation, Cover & Concealment, Obstacles, Key Terrain, Avenues of Approach)  
4Ô∏è‚É£ **ASCOPE:** (Area, Structures, Capabilities, Organizations, People, Events)  
5Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã:** –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏.  

–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: {task_text}
"""

    logging.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –≤ OpenAI...")

    try:
        response = await asyncio.wait_for(openai.ChatCompletion.acreate(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=1000
        ), timeout=30)
        result = response["choices"][0]["message"]["content"]
        logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        return result
    except asyncio.TimeoutError:
        logging.error("‚è≥ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏.")
        return "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∫ OpenAI –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
    except openai.OpenAIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏: {e}"

### –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û WARNORD
async def generate_warnord(task_text: str):
    prompt = f"""–¢—ã ‚Äî –≤–æ–µ–Ω–Ω—ã–π —à—Ç–∞–±–Ω–æ–π –æ—Ñ–∏—Ü–µ—Ä. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—ã–π WARNORD –¥–ª—è —ç—Ç–æ–π –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:

1Ô∏è‚É£ **–°–∏—Ç—É–∞—Ü–∏—è**  
- –ó–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞  
- –ó–æ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏  
- –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ (OCOKA)  
- –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã)  
- –í—Ä–∞–∂–µ—Å–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (METT-TC)  
- –î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã (METT-TC)  
- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä (ASCOPE)  

2Ô∏è‚É£ **–ó–∞–¥–∞–Ω–∏–µ**  
- 5W (–ö—Ç–æ, –ß—Ç–æ, –ì–¥–µ, –ö–æ–≥–¥–∞, –ü–æ—á–µ–º—É)  

3Ô∏è‚É£ **–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ**  
- –û–±—â–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è  
- –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–∏–ª–∏—è  
- –§–∞–∑—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ–π—Ü–æ–≤  
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç  

4Ô∏è‚É£ **–õ–æ–≥–∏—Å—Ç–∏–∫–∞**  
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ  
- –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã, —Ç–æ–ø–ª–∏–≤–æ, –ø–∏—Ç–∞–Ω–∏–µ  
- –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è  
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ  

5Ô∏è‚É£ **–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–≤—è–∑—å**  
- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞  
- –ö–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏  
- –ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã  

**–¢–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏:** {task_text}
"""

    logging.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é WARNORD –≤ OpenAI...")

    try:
        response = await asyncio.wait_for(openai.ChatCompletion.acreate(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=1500
        ), timeout=40)
        result = response["choices"][0]["message"]["content"]
        logging.info("‚úÖ WARNORD —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        return result
    except asyncio.TimeoutError:
        logging.error("‚è≥ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD.")
        return "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∫ OpenAI –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
    except openai.OpenAIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD: {e}"

### –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´ (–¢–ê–ë–õ–ò–¶–ê)
async def analyze_weather():
    prompt = """–¢—ã ‚Äî –≤–æ–µ–Ω–Ω—ã–π –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã**
| –£—Å–ª–æ–≤–∏—è     | –í–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—Å        | –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—Ä–∞–≥–∞      | –í—ã–≤–æ–¥ |
|-------------|----------------------|----------------------|-------|
| –í–∏–¥–∏–º–æ—Å—Ç—å   | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥—ã–º–∫–æ–π     | –í—Ä–∞–∂–µ—Å–∫–∏–µ –ë–ü–õ–ê —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å | –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å |
| –í–µ—Ç–µ—Ä       | 10 –º/—Å, —é–∂–Ω—ã–π         | –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã | –í–µ—Ç–µ—Ä –º–µ—à–∞–µ—Ç —Å–Ω–∞–π–ø–µ—Ä–∞–º |
| –û—Å–∞–¥–∫–∏      | –ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å       | –†–∞–∑–º–æ–∫–∞–Ω–∏–µ –ø–æ—á–≤—ã      | –£—Å–ª–æ–∂–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ |
| –¢—É—á–Ω–æ—Å—Ç—å    | –í—ã—Å–æ–∫–∞—è               | –°–Ω–∏–∂–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –¥—Ä–æ–Ω–æ–≤ | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞—ç—Ä–æ—Ä–∞–∑–≤–µ–¥–∫–∞ |
| –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ | +5¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 80%   | –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è | –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–µ–ø–ª–µ–Ω–∏–µ |

–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å **–≤–∏–¥–∏–º–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä, –æ—Å–∞–¥–∫–∏, —Ç—É—á–Ω–æ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å**, –∞ —Ç–∞–∫–∂–µ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã.
"""

    logging.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –≤ OpenAI...")

    try:
        response = await asyncio.wait_for(openai.ChatCompletion.acreate(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=500
        ), timeout=20)
        result = response["choices"][0]["message"]["content"]
        logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        return result
    except asyncio.TimeoutError:
        logging.error("‚è≥ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≥–æ–¥—ã.")
        return "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∫ OpenAI –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."

### –ó–ê–ü–£–°–ö –ë–û–¢–ê
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())