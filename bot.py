import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import openai
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# API-–∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")]
    ],
    resize_keyboard=True
)

# /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ (5W)
@dp.message(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def analyze_task_command(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

@dp.message(lambda message: message.text and message.text not in ["–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏", "–°–æ–∑–¥–∞—Ç—å WARNORD", "–ü–æ–≥–æ–¥–∞"])
async def process_task(message: types.Message):
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")

    prompt = f"""
    –†–∞–∑–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É 5W:
    {message.text}
    –§–æ—Ä–º–∞—Ç:
    {{
      "who": "...",
      "what": "...",
      "where": "...",
      "when": "...",
      "why": "..."
    }}
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "system", "content": prompt}]
        )

        analysis = json.loads(response["choices"][0]["message"]["content"])

        result_text = (
            f"üìå **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n"
            f"1Ô∏è‚É£ –ö—Ç–æ? {analysis['who']}\n"
            f"2Ô∏è‚É£ –ß—Ç–æ? {analysis['what']}\n"
            f"3Ô∏è‚É£ –ì–¥–µ? {analysis['where']}\n"
            f"4Ô∏è‚É£ –ö–æ–≥–¥–∞? {analysis['when']}\n"
            f"5Ô∏è‚É£ –ü–æ—á–µ–º—É? {analysis['why']}"
        )

        await message.answer(result_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏.")

# **–°–æ–∑–¥–∞–Ω–∏–µ WARNORD**
@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å WARNORD")
async def create_warnord_command(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD:")

@dp.message(lambda message: message.text and message.text not in ["–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏", "–°–æ–∑–¥–∞—Ç—å WARNORD", "–ü–æ–≥–æ–¥–∞"])
async def generate_warnord(message: types.Message):
    await message.answer("üìú –ì–µ–Ω–µ—Ä–∏—Ä—É—é WARNORD...")

    prompt = f"""
    –°–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π WARNORD –ø–æ –∑–∞–¥–∞—á–µ:
    {message.text}

    **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
    **WARNORD**
    1Ô∏è‚É£ **–°–ò–¢–£–ê–¶–ò–Ø**
    - –ó–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞: ...
    - –ó–æ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ...
    - –ú–µ—Å—Ç–Ω–æ—Å—Ç—å: ...
    - –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: ...
    - –í—Ä–∞–∂–µ—Å–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ...
    - –î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã: ...
    - –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä: ...

    2Ô∏è‚É£ **–ó–ê–î–ê–ù–ò–ï**
    - –ß—Ç–æ: ...
    - –ö—Ç–æ: ...
    - –ì–¥–µ: ...
    - –ö–æ–≥–¥–∞: ...
    - –ü–æ—á–µ–º—É: ...

    3Ô∏è‚É£ **–í–´–ü–û–õ–ù–ï–ù–ò–ï**
    - –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: ...
    - –û—Å–Ω–æ–≤–Ω–æ–π —É–¥–∞—Ä: ...
    - –≠—Ç–∞–ø—ã: ...
    - –†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: ...
    - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ...

    4Ô∏è‚É£ **–õ–û–ì–ò–°–¢–ò–ö–ê**
    - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ...
    - –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏: ...
    - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ...
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: ...

    5Ô∏è‚É£ **–ö–û–ú–ê–ù–î–û–í–ê–ù–ò–ï –ò –°–í–Ø–ó–¨**
    - –ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ: ...
    - –°–≤—è–∑—å: ...
    - –ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞: ...
    - –°–≤—è–∑—å –≤ –ß–°: ...
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "system", "content": prompt}]
        )

        warnord_text = response["choices"][0]["message"]["content"]
        await message.answer(warnord_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())