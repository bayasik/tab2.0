import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import openai
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()

openai.api_key = OPENAI_API_KEY

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ –ø–æ 5W
async def analyze_task(task_text):
    prompt = f"""
    –†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ 5W:
    1. –ö—Ç–æ? (who)
    2. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? (what)
    3. –ì–¥–µ? (where)
    4. –ö–æ–≥–¥–∞? (when)
    5. –ü–æ—á–µ–º—É? (why)

    –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
    {task_text}

    –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫."},
                  {"role": "user", "content": prompt}]
    )

    return json.loads(response['choices'][0]['message']['content'])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–µ–≤–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ (METT-TC, OCOKA, ASCOPE, –ø–æ–≥–æ–¥–∞)
async def analyze_battlefield(task_details):
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

    **1. METT-TC:**
    - Mission (–ó–∞–¥–∞—á–∞)
    - Enemy (–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫)
    - Terrain (–ú–µ—Å—Ç–Ω–æ—Å—Ç—å)
    - Troops (–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã)
    - Time (–í—Ä–µ–º—è)
    - Civilians (–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ)

    **2. OCOKA (–ê–Ω–∞–ª–∏–∑ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏):**
    - Observation & Fields of Fire
    - Cover & Concealment
    - Obstacles
    - Key Terrain
    - Avenues of Approach

    **3. ASCOPE (–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞):**
    - Area
    - Structures
    - Capabilities
    - Organizations
    - People
    - Events

    –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
    {task_details}

    –û—Ç–≤–µ—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫."},
                  {"role": "user", "content": prompt}]
    )

    return response['choices'][0]['message']['content']

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD
async def generate_warnord(task_details):
    prompt = f"""
    –°—Ñ–æ—Ä–º–∏—Ä—É–π WARNORD –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ:

    {task_details}

    **WARNORD:**
    1. **–°–∏—Ç—É–∞—Ü–∏—è** (–û–±–∑–æ—Ä METT-TC, OCOKA, ASCOPE)
    2. **–ó–∞–¥–∞–Ω–∏–µ** (5W)
    3. **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** (–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –∏ —Ç–∞–∫—Ç–∏–∫–∞)
    4. **–õ–æ–≥–∏—Å—Ç–∏–∫–∞** (–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
    5. **–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–≤—è–∑—å** (–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞, —Å–∏–≥–Ω–∞–ª—ã —Å–≤—è–∑–∏)

    –û—Ç–≤–µ—Ç—å –≤ —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "–¢—ã –æ—Ñ–∏—Ü–µ—Ä —à—Ç–∞–±–∞, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π WARNORD."},
                  {"role": "user", "content": prompt}]
    )

    return response['choices'][0]['message']['content']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def process_analysis(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

@dp.message(lambda message: message.text.startswith("–ë–æ–µ–≤–∞—è –∑–∞–¥–∞—á–∞:"))
async def analyze_and_respond(message: types.Message):
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
    analysis = await analyze_task(message.text)
    battlefield_info = await analyze_battlefield(message.text)

    response_text = f"""
üìå **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**
1Ô∏è‚É£ **–ö—Ç–æ?** {analysis['who']}
2Ô∏è‚É£ **–ß—Ç–æ?** {analysis['what']}
3Ô∏è‚É£ **–ì–¥–µ?** {analysis['where']}
4Ô∏è‚É£ **–ö–æ–≥–¥–∞?** {analysis['when']}
5Ô∏è‚É£ **–ü–æ—á–µ–º—É?** {analysis['why']}

‚ö† **–ê–Ω–∞–ª–∏–∑ –±–æ–µ–≤–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏:**
{battlefield_info}
"""
    await message.answer(response_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD
@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å WARNORD")
async def warnord_request(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD:")

@dp.message(lambda message: message.text.startswith("–ë–æ–µ–≤–∞—è –∑–∞–¥–∞—á–∞:"))
async def generate_and_respond(message: types.Message):
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é WARNORD...")
    warnord = await generate_warnord(message.text)

    response_text = f"""
üìå **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–µ–≤–æ–π –ø—Ä–∏–∫–∞–∑ (WARNORD):**
{warnord}
"""
    await message.answer(response_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())