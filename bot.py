import asyncio
import logging
import os
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ –ø–æ 5W
async def analyze_task(task_text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–†–∞–∑–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É 5W."},
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É:\n{task_text}"}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏."

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã
async def analyze_weather():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–°—Ñ–æ—Ä–º–∏—Ä—É–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –≤ –≤–æ–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."},
                {"role": "user", "content": "–û–ø–∏—à–∏ –≤–æ–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π."}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≥–æ–¥—ã."

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD
async def generate_warnord(task_text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –±–æ–µ–≤–æ–π –ø—Ä–∏–∫–∞–∑ (WARNORD)."},
                {"role": "user", "content": f"–°—Ñ–æ—Ä–º–∏—Ä—É–π WARNORD –¥–ª—è –∑–∞–¥–∞—á–∏:\n{task_text}"}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏"
@dp.message(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def request_task_analysis(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞"
@dp.message(lambda message: message.text == "–ü–æ–≥–æ–¥–∞")
async def weather_info(message: types.Message):
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è...")
    weather_result = await analyze_weather()
    await message.answer(f"üå¶ **–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã:**\n{weather_result}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å WARNORD"
@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å WARNORD")
async def request_warnord_creation(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏)
@dp.message(lambda message: message.text and not message.text.startswith("/"))
async def process_task(message: types.Message):
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
    analysis_result = await analyze_task(message.text)
    await message.answer(f"üìå **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n{analysis_result}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è WARNORD)
@dp.message(lambda message: message.text and message.text.startswith("WARNORD:"))
async def process_warnord(message: types.Message):
    await message.answer("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π WARNORD...")
    warnord_result = await generate_warnord(message.text)
    await message.answer(f"üìã **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WARNORD:**\n{warnord_result}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())