import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import openai

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ú–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="‚öî –°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞")],
        [KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç")]
    ],
    resize_keyboard=True
)

openai.api_key = OPENAI_API_KEY

async def send_log_to_telegram(log_text):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ Telegram """
    try:
        await bot.send_message(ADMIN_CHAT_ID, f"üìù *–õ–æ–≥*: {log_text}", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

@dp.message()
async def handle_messages(message: types.Message):
    text = message.text.lower()
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    await send_log_to_telegram(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: `{text}`")

    if text == "üìä –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    elif text == "‚öî —Å–æ–∑–¥–∞—Ç—å warnord":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD.")
    elif text == "üå§ –ø–æ–≥–æ–¥–∞":
        await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≥–æ–¥—É...")
        weather_report = await analyze_weather()
        await message.answer(weather_report, parse_mode="Markdown")
    elif text == "üîÑ —Ä–µ—Å—Ç–∞—Ä—Ç":
        await message.answer("‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await send_log_to_telegram("‚ôª –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞...")
        os.execv(sys.executable, ['python'] + sys.argv)
    else:
        if message.reply_to_message and "–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" in message.reply_to_message.text:
            await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏...")
            analysis = await analyze_task(message.text)
            await message.answer(f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n{analysis}", parse_mode="Markdown")
        elif message.reply_to_message and "–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ WARNORD" in message.reply_to_message.text:
            await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π WARNORD...")
            warnord = await generate_warnord(message.text)
            await message.answer(f"‚öî **WARNORD:**\n{warnord}", parse_mode="Markdown")

async def analyze_task(task_text: str):
    logger.info("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    await send_log_to_telegram("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    prompt = f"–¢—ã —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É...\n{task_text}"
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=1000
        )
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        await send_log_to_telegram("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return response["choices"][0]["message"]["content"]
    except openai.OpenAIError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏."

async def generate_warnord(task_text: str):
    logger.info("üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é WARNORD –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    await send_log_to_telegram("üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é WARNORD –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    prompt = f"–¢—ã —à—Ç–∞–±–Ω–æ–π –æ—Ñ–∏—Ü–µ—Ä, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—ã–π WARNORD...\n{task_text}"
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=1500
        )
        logger.info("‚úÖ WARNORD —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        await send_log_to_telegram("‚úÖ WARNORD —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        return response["choices"][0]["message"]["content"]
    except openai.OpenAIError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD."

async def analyze_weather():
    logger.info("üå§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    await send_log_to_telegram("üå§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
    
    prompt = """–¢—ã –≤–æ–µ–Ω–Ω—ã–π –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã**
| –£—Å–ª–æ–≤–∏—è     | –í–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—Å        | –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—Ä–∞–≥–∞      | –í—ã–≤–æ–¥ |
|-------------|----------------------|----------------------|-------|
| –í–∏–¥–∏–º–æ—Å—Ç—å   | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥—ã–º–∫–æ–π     | –í—Ä–∞–∂–µ—Å–∫–∏–µ –ë–ü–õ–ê —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å | –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å |
| –í–µ—Ç–µ—Ä       | 10 –º/—Å, —é–∂–Ω—ã–π         | –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã | –í–µ—Ç–µ—Ä –º–µ—à–∞–µ—Ç —Å–Ω–∞–π–ø–µ—Ä–∞–º |
| –û—Å–∞–¥–∫–∏      | –ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å       | –†–∞–∑–º–æ–∫–∞–Ω–∏–µ –ø–æ—á–≤—ã      | –£—Å–ª–æ–∂–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ |
| –¢—É—á–Ω–æ—Å—Ç—å    | –í—ã—Å–æ–∫–∞—è               | –°–Ω–∏–∂–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –¥—Ä–æ–Ω–æ–≤ | –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞—ç—Ä–æ—Ä–∞–∑–≤–µ–¥–∫–∞ |
| –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ | +5¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 80%   | –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è | –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–µ–ø–ª–µ–Ω–∏–µ |

–í –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≥–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–≤–∏–¥–∏–º–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä, –æ—Å–∞–¥–∫–∏, —Ç—É—á–Ω–æ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å** —Å –≤–ª–∏—è–Ω–∏–µ–º –Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=500
        )
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω.")
        await send_log_to_telegram("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return response["choices"][0]["message"]["content"]
    except openai.OpenAIError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≥–æ–¥—ã."

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await send_log_to_telegram("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())