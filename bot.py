import asyncio
import logging
import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from openai import OpenAI, OpenAIError

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)


@dp.message(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
async def request_task(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")


@dp.message(lambda message: message.text not in ["–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏", "–°–æ–∑–¥–∞—Ç—å WARNORD", "–ü–æ–≥–æ–¥–∞"])
async def process_task(message: types.Message):
    user_text = message.text.strip()

    if not user_text:
        await message.answer("–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ 5W (who, what, where, when, why)"},
                {"role": "user", "content": user_text}
            ]
        )

        result_text = response.choices[0].message.content.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–º JSON
        try:
            result_data = json.loads(result_text)
        except json.JSONDecodeError:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI.")
            return

        formatted_result = f"""
üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**
**–ö—Ç–æ:** {result_data.get("who", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
**–ß—Ç–æ:** {result_data.get("what", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
**–ì–¥–µ:** {result_data.get("where", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
**–ö–æ–≥–¥–∞:** {result_data.get("when", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
**–ü–æ—á–µ–º—É:** {result_data.get("why", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
"""

        await message.answer(formatted_result)

    except OpenAIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å WARNORD")
async def create_warnord(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è WARNORD –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


@dp.message(lambda message: message.text == "–ü–æ–≥–æ–¥–∞")
async def weather_info(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())