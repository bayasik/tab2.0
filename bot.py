import asyncio
import logging
import os
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å WARNORD")],
        [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
    ],
    resize_keyboard=True
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å WARNORD")
async def request_task(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏, –∏ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é WARNORD.")

@dp.message(lambda message: message.text and message.text != "–°–æ–∑–¥–∞—Ç—å WARNORD")
async def process_task(message: types.Message):
    task_text = message.text

    try:
        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ 1: –°–∏—Ç—É–∞—Ü–∏—è (METT-TC, OCOKA, ASCOPE, –ø–æ–≥–æ–¥–∞)
        response_situation = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ METT-TC, OCOKA, ASCOPE –∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –±–æ–µ–≤–æ–π –∑–∞–¥–∞—á–∏."},
                {"role": "user", "content": task_text}
            ]
        )
        situation = response_situation["choices"][0]["message"]["content"]

        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ 2: –ó–∞–¥–∞–Ω–∏–µ (5W)
        response_task = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –æ—Ñ–∏—Ü–µ—Ä. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –±–æ–µ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É 5W."},
                {"role": "user", "content": task_text}
            ]
        )
        task = response_task["choices"][0]["message"]["content"]

        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        response_execution = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥. –°–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–∏–≤ –µ–≥–æ –Ω–∞ —Ñ–∞–∑—ã."},
                {"role": "user", "content": task_text}
            ]
        )
        execution = response_execution["choices"][0]["message"]["content"]

        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ 4: –õ–æ–≥–∏—Å—Ç–∏–∫–∞
        response_logistics = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –æ—Ñ–∏—Ü–µ—Ä —Å–Ω–∞–±–∂–µ–Ω–∏—è. –û–ø–∏—à–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."},
                {"role": "user", "content": task_text}
            ]
        )
        logistics = response_logistics["choices"][0]["message"]["content"]

        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ 5: –ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–≤—è–∑—å
        response_command = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –æ—Ñ–∏—Ü–µ—Ä —Å–≤—è–∑–∏. –û–ø–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–∏."},
                {"role": "user", "content": task_text}
            ]
        )
        command = response_command["choices"][0]["message"]["content"]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await message.answer(f"üìã **WARNORD: –ë–æ–µ–≤–æ–π –ø—Ä–∏–∫–∞–∑**")
        await message.answer(f"üìå **1. –°–ò–¢–£–ê–¶–ò–Ø:**\n\n{situation}")
        await message.answer(f"üìå **2. –ó–ê–î–ê–ù–ò–ï:**\n\n{task}")
        await message.answer(f"üìå **3. –í–´–ü–û–õ–ù–ï–ù–ò–ï:**\n\n{execution}")
        await message.answer(f"üìå **4. –õ–û–ì–ò–°–¢–ò–ö–ê:**\n\n{logistics}")
        await message.answer(f"üìå **5. –ö–û–ú–ê–ù–î–û–í–ê–ù–ò–ï –ò –°–í–Ø–ó–¨:**\n\n{command}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WARNORD.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))